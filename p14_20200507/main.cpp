#include<iostream>
#include"Time.h"

using namespace std;

/*
	一、拷贝构造函数
		类内拷贝是每个成员变量逐个拷贝
		若一个类的构造函数的第一个参数是所属类类型的引用，若还有其他参数，这些额为的参数都有默认值，则该构造函数为拷贝构造函数
		函数默认参数必须放在函数声明中，除非函数没有声明
		拷贝构造函数的作用：会在一定的时机会被系统自动调用
		
		1. 建议拷贝构造函数第一个参数总是带着const
		2. explicit：拷贝构造函数不要声明为explicit
		
		成员变量逐个拷贝的功能因为我们自己定义的拷贝构造函数的存在而丢失了作用，
			我们自己的拷贝构造函数取代了系统默认的逐个成员变量拷贝的构造函数
		1.若我们自己没有定义一个拷贝构造函数，编译器就会帮我们定义一个
		2.若是编译器给我们合成的拷贝构造函数，这个合称拷贝构造函数一般也是将成员变量进行逐个拷贝到正在创建的对象中
		每个成员的类型决定了它如何拷贝，比如说，成员变量如果是整型的，那么就直接将值拷贝过来，若是类类型，就会调用这个类的拷贝构造函数
		3.若自己定义了拷贝构造函数，那么就取代了系统合成的拷贝构造函数，这时，我们就应该将自己的拷贝构造函数中的类成员进行赋值
		  以免出现类成员没有被复制就使用的事情发生

		还有一些情况会发生拷贝构造函数的调用:
		1.将对象作为一个实参传递给一个非引用类型的形参
		2.从一个函数中返回一个对象的时候，也会调用拷贝构造函数
		3.其他情况
*/

/*
	类的使用
*/
void test01() {
	Time time1(11, 11, 11);
	Time time2(time1);  // 调用了拷贝构造函数
	time2.printTime();  // 11:11:11
}

/*
	将对象作为一个实参传递给一个非引用类型的形参
*/

void test02(Time time) {
	return;
 }


/*
	从一个函数中返回一个对象的时候，也会调用拷贝构造函数
*/
Time test03() {
	Time time(12, 12, 12);
	return time;  // 系统产生了临时对象并且调用了类的拷贝构造函数
}

int main() {
	
	//test01();
	Time time(11, 11, 11);
	test02(time); // 调用了拷贝构造函数

	Time time1 = test03(); // 调用了拷贝构造函数
	time1.printTime();  // 12:12:12
	
	system("pause");
	return 0;
}