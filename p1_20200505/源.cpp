#include<cstdio>
/*
	输入输出流：流就是一个字符序列
*/
#include<iostream>

/*
	std是标准库命名空间
	cout 是一个对象
	cout << 表示将右边的值写到cout中
	endl:是一个模板函数名
		强制刷新缓冲区，缓冲区中所有的数据都被系统清除
		输出缓冲区：一段内存，cout输出的时候实际上是往输出缓冲区输出内容，那么输出缓冲区在特定的时机输出到屏幕上
			1、缓冲区满了
			2、程序执行到main的return语句
			3、当系统不繁忙的时候，系统也会查看缓冲区内容，发现新内容也会输出到屏幕 
			4、调用endl进行强制缓冲区刷新 
*/
/*
	面向对象程序设计和基于对象的程序设计
	在C语言中，使用结构，要定义一个属于该结构的变量
	在C++中，使用类，定义一个对象，在类中可以定义成员变量、成员函数(方法，实现相关功能)
	main返回值一般没用，但是在linux下，返回值是有用处的

	可移植性问题：
		C++属于编译型语言，将程序编译为二进制语言(可执行文件)
		解释性语言：不预先编译，先解释，在运行

	命名空间简介：
		为防止命名冲突而引入的一种机制，系统中可以定义多个命名空间，每个命名空间都有自己的名字，不可以同名
		可以将命名空间看做作用域，不同命名空间，即便同名，也互不影响
		命名空间的定义可以不连续，甚至可以卸载多个文件中， 
		
		若以往没有定义这个命名空间，那么 namespace 命名空间名 就相当于定义了命名空间，若以前没有定义过，namespace 命名空间名 就
		相当于打开已有的命名空间，并为其添加新成员

		外界如何访问某个命名空间中的函数
		访问格式：命名空间名::实体函数名     其中::叫做作用域运算符
*/

namespace space1 {
	void print() {
		std::cout << "这是space1" << std::endl;
	}
}

namespace space2 {
	void print() {
		std::cout << "这是space2" << std::endl;
	}
}

/*
	输入流示例
*/
void cin() {
	int value1, value2;
	/*
		cin 是输入运算符
	*/
	std::cin >> value1 >> value2;
	std::cout << "value1 + value2 = " << value1 + value2 << std::endl;
}



int main() {
	/*
		调用不同命名空间的同名函数
	*/
	space1::print();
	space2::print();
	cin();
	system("pause");
	return 0;
}