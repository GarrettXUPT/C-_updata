#include<iostream>

using namespace std;

/*
	一、函数回顾与后置返回类型
		在函数定义中，形参如果在函数体内用不到的话，则可以不给形参名字，只给类型，函数声明(函数原型)也可以这样
		将函数返回类型放到函数名之前，叫做前置返回类型
		C++11中引用后置返回类型，在函数声明和函数定义中，将返回类型写在参数列表之后
		auto func(int a, int b) ->void  auto标志着为后置返回值类型，返回类型是从->之后开始的

	二、内联函数
		函数定义前加上inline，这个普通函数就变成了内联函数
		调用函数会消耗资源，函数体很小，但是调用有很频繁，所以引入内联函数 
		1.inline影响编译器，在编译简短inline这种函数进行处理，系统尝试将调用该函数的调用动作替换为函数本体，来提升性能
			int func(){
				return 1;
			}
			int abc = func(5) 多次调用时，系统就会尝试使用int abc = 1； 来代替原操作，进而提升性能

		2.inline只是开发者对编译器的建议，编译器可以尝试去做，也可以不去做，取决于函数的诊断功能，不同的编译器不同
		3.内联函数的定义必须放在头文件中(.h文件)，这样在使用这个内联函数的.cpp就可以直接将内联函数include进来，以便于
		  找到函数本体源代码，并尝试替换函数体内的语句

		优缺点：
			优点：
				替换成功以后减小函数压栈，减小占用的内存，会提高代码效率
			缺点：
				会造成代码膨胀
			建议：
				内联函数的函数体尽量小，防止代码膨胀
		注意：
			编译器之间的区别可能效果差异较大，inline函数尽量简单，代码尽可能小。循环、分支、递归不要出现在inline函数中
			否则，编译器很有可能因为有这些代码，拒绝函数成为内联函数 
		
		constexpr函数，可以看做是一种更为严格的内联函数
		
		#define宏展开也类似于inline函数，但是有区别
	
	三、函数杂合用法总结
		1、函数返回类型为void表示函数不返回任何类型，但是可以调用一个返回类型时void函数，使它作为另一个void返回值
		   函数的返回值
		2、函数返回指针和返回引用
		3、若一个函数不调用，则该函数可以只有声明部分没有实现部分
		4、函数只能定义一次，定义放在源文件中，可以声明多次
		5、引用作为函数形参，可以间接的改变外界的值相当于在C中用指针，而且传引用效率较高
		6、函数支持重载

	四、const char*,char const*, char* const三者的区别
		const char*  指针指向的内容不可变，意思是不能通过该指针来修改
		char const*  与上述功能等价
		char* const  在定义时必须初始化，表示p一旦指向一个东西，就不可以再指向其他东西，指针的指向不可变
		const char* const p = str; p的指向及指向的内容也不可改变

		int i = 100;
		const int& a = i;  代表a的内容不可修改

	5、函数形参中带有const
		若在函数不改变形参的值，那么就要在形参列表中增加const 防止无意中修改值
		实参类型可以更灵活

*/


/*
	后置返回类型

*/

auto func(int a, int b) ->void {
	cout << "后置返回值类型" << endl;
}

/*
	普通函数
*/
void test01() {
	cout << "这就是个普通函数" << endl;
}

/*
	内联函数
*/
inline void test02() {
	cout << "这是一个内联函数" << endl;
}

/*
	函数杂合用法
*/
void funca() {

}

void funcb() {
	return  funca();
}

/*
	该种代码可以编译通过，但是本身是有问题的
	若有地方对其进行调用，返回值是临时变量的地址，这会带来问题
	向不属于该地址的内存写入值
*/
int* funcc() {
	int value1 = 9;
	return &value1;
}

/*
	向不属于该地址的内存写入值，也会造成隐患
	在调用时不能用引用接，若是使用整型来接就没有问题了
*/
int& funcd() {
	int value1 = 9;
	return value1;
}

int main() {

	/*
		调用后置返回值类型函数
	*/
	int a = 1, b = 2;
	func(a, b);


	system("pause");
	return 0;
}